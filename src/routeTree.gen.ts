/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as DashboardIndexImport } from './routes/dashboard/index'
import { Route as DashboardOverviewImport } from './routes/dashboard/overview'
import { Route as DashboardAnalyticsImport } from './routes/dashboard/analytics'

// Create/Update Routes

const DashboardIndexRoute = DashboardIndexImport.update({
  id: '/dashboard/',
  path: '/dashboard/',
  getParentRoute: () => rootRoute,
} as any)

const DashboardOverviewRoute = DashboardOverviewImport.update({
  id: '/dashboard/overview',
  path: '/dashboard/overview',
  getParentRoute: () => rootRoute,
} as any)

const DashboardAnalyticsRoute = DashboardAnalyticsImport.update({
  id: '/dashboard/analytics',
  path: '/dashboard/analytics',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/dashboard/analytics': {
      id: '/dashboard/analytics'
      path: '/dashboard/analytics'
      fullPath: '/dashboard/analytics'
      preLoaderRoute: typeof DashboardAnalyticsImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/overview': {
      id: '/dashboard/overview'
      path: '/dashboard/overview'
      fullPath: '/dashboard/overview'
      preLoaderRoute: typeof DashboardOverviewImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/dashboard/analytics': typeof DashboardAnalyticsRoute
  '/dashboard/overview': typeof DashboardOverviewRoute
  '/dashboard': typeof DashboardIndexRoute
}

export interface FileRoutesByTo {
  '/dashboard/analytics': typeof DashboardAnalyticsRoute
  '/dashboard/overview': typeof DashboardOverviewRoute
  '/dashboard': typeof DashboardIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/dashboard/analytics': typeof DashboardAnalyticsRoute
  '/dashboard/overview': typeof DashboardOverviewRoute
  '/dashboard/': typeof DashboardIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/dashboard/analytics' | '/dashboard/overview' | '/dashboard'
  fileRoutesByTo: FileRoutesByTo
  to: '/dashboard/analytics' | '/dashboard/overview' | '/dashboard'
  id:
    | '__root__'
    | '/dashboard/analytics'
    | '/dashboard/overview'
    | '/dashboard/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  DashboardAnalyticsRoute: typeof DashboardAnalyticsRoute
  DashboardOverviewRoute: typeof DashboardOverviewRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  DashboardAnalyticsRoute: DashboardAnalyticsRoute,
  DashboardOverviewRoute: DashboardOverviewRoute,
  DashboardIndexRoute: DashboardIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/dashboard/analytics",
        "/dashboard/overview",
        "/dashboard/"
      ]
    },
    "/dashboard/analytics": {
      "filePath": "dashboard/analytics.tsx"
    },
    "/dashboard/overview": {
      "filePath": "dashboard/overview.tsx"
    },
    "/dashboard/": {
      "filePath": "dashboard/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
